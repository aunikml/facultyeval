"""
Django settings for faculty_eval project.

Generated by 'django-admin startproject' using Django 5.1.4.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SECRET KEY ---
# IMPORTANT: In production, set the SECRET_KEY environment variable.
# For local development, a default is provided.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-a_default_dev_secret_key_that_is_long_enough')
if SECRET_KEY == 'django-insecure-a_default_dev_secret_key_that_is_long_enough' and not os.environ.get('DJANGO_DEBUG', 'True') == 'True':
    raise ValueError("DJANGO_SECRET_KEY must be set in production environment variables!")


# --- DEBUG MODE ---
# Set DJANGO_DEBUG environment variable to 'False' in production.
# Defaults to True for local development.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'


# --- ALLOWED HOSTS ---
# In production, set DJANGO_ALLOWED_HOSTS environment variable
# to a comma-separated list of your domain(s) e.g., "your-app.herokuapp.com,www.yourdomain.com"
if DEBUG:
    ALLOWED_HOSTS = ['your-app-name.herokuapp.com','localhost', '127.0.0.1', '*'] # '*' is for convenience in dev, be more specific if needed
else:
    allowed_hosts_env = os.environ.get('DJANGO_ALLOWED_HOSTS')
    if allowed_hosts_env:
        ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',')]
    else:
        # Fallback if not set, but Heroku will typically add its own via an addon or buildpack
        # You'll need to set this if deploying elsewhere without automatic host handling.
        ALLOWED_HOSTS = [] # Should not be empty in production, will cause errors.
        print("WARNING: DJANGO_ALLOWED_HOSTS environment variable is not set for production!")


# --- CSRF TRUSTED ORIGINS ---
# In production, set DJANGO_CSRF_TRUSTED_ORIGINS to a comma-separated list of your HTTPS domains
# e.g., "https://your-app.herokuapp.com,https://www.yourdomain.com"
if not DEBUG:
    csrf_trusted_origins_env = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
    if csrf_trusted_origins_env:
        CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_trusted_origins_env.split(',')]
    else:
        CSRF_TRUSTED_ORIGINS = [] # Needs to be set for POST requests over HTTPS in prod
        print("WARNING: DJANGO_CSRF_TRUSTED_ORIGINS environment variable is not set for production!")
else:
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]


# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # For serving static files with runserver if needed, place before staticfiles
    'django.contrib.staticfiles',
    # Your apps
    'responseupload',
    'managerpanel',
    'supervisor',
    'progress',
    # # Third-party apps
    # 'django_select2',
    # 'django_extensions', # If you installed it for runserver_plus
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Should be high up, after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'faculty_eval.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': { # For custom template tags
                'custom_filters': 'responseupload.templatetags.custom_filters',
                'progress_tags': 'progress.templatetags.progress_tags', # Register progress tags
            },
        },
    },
]

WSGI_APPLICATION = 'faculty_eval.wsgi.application'


# --- Database ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# Default to SQLite for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Production database configuration (e.g., Heroku Postgres)
# DATABASE_URL environment variable is used by dj_database_url
# Set ssl_require based on your production database needs (Heroku Postgres often needs it)
db_from_env = dj_database_url.config(
    conn_max_age=500,
    ssl_require=not DEBUG # Require SSL in production (not DEBUG), allow no SSL in dev
)
if db_from_env: # If DATABASE_URL is set
    DATABASES['default'].update(db_from_env)


# --- Password validation ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Or your preferred timezone, e.g., 'Asia/Dhaka'
USE_I18N = True
USE_TZ = True # Recommended to keep True for timezone-aware datetimes


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collectstatic in production
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Project-level static files directory
]
# Use WhiteNoise for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Authentication ---
LOGIN_URL = 'responseupload:login' # URL name for the login page
LOGIN_REDIRECT_URL = 'responseupload:dashboard' # Default redirect after login
LOGOUT_REDIRECT_URL = 'responseupload:login'    # Default redirect after logout


# --- Email settings ---
# For development, console backend is fine. For production, configure a real SMTP server.
EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST')
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 587)) # Default SMTP port
EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD') # Store sensitive credentials as env vars
DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_DEFAULT_FROM_EMAIL', 'webmaster@localhost')
SERVER_EMAIL = os.environ.get('DJANGO_SERVER_EMAIL', DEFAULT_FROM_EMAIL) # For error emails to ADMINS


# --- Security settings for Production (when DEBUG is False) ---
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # HSTS Settings - be cautious with these, especially HSTS_PRELOAD
    # Only enable HSTS once you are sure your SSL setup is permanent and correct.
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = False # Set to True only after confirming everything works and submitting to preload list
    # If behind a proxy that handles SSL termination (like Heroku)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Development-specific security settings (more relaxed)
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False

# --- Logging Configuration (Optional but Recommended) ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if DEBUG else 'verbose', # Simpler in dev, verbose in prod
        },
        # Add file handler for production if desired
        # 'file': {
        #     'level': 'WARNING', # Or INFO
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'django_prod.log',
        #     'formatter': 'verbose',
        # },
    },
    'root': {
        'handlers': ['console'], # Add 'file' here if using file handler
        'level': 'INFO', # Default level for all loggers
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Add 'file'
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False, # Don't pass to root logger if handled here
        },
    },
}

# --- django-select2 settings (if you customize cache) ---
# SELECT2_CACHE_BACKEND = "default" # Or specify another cache from CACHES
# SELECT2_CACHE_PREFIX = "select2"